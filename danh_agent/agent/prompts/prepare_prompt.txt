# EXECUTION INSTRUCTIONS

Your job is to **EXECUTE** the tool specified in the thinking section with the exact parameters provided.

## YOUR TASK:
1. Read the <thinking> section to find NEXT ACTION and SPECIFIC GUIDANCE
2. Extract any required values from <logs> if referenced
3. Execute the specified tool with those exact parameters

## CRITICAL PARAMETER RULES:

### Value Handling:
- **USE REAL VALUES** - Extract actual job IDs, paths, and names from <logs>
- **NO PLACEHOLDERS** - Never use "<job_id>", "<script_path>", etc. - use actual values like "12345", "/home/user/job.sh"
- **COMPLETE VALUES** - Don't truncate (use "node[01-04]" not "node...")
- **EXACT COPY** - Copy values exactly as they appear in logs or guidance

### Data Type Rules (CRITICAL FOR AVOIDING SYNTAX ERRORS):
- **Strings**: Use quotes for text values
  - ✅ `script_path="/home/user/job.sh"`
  - ✅ `job_name="my_job"`
  - ✅ `state="RUNNING"`

- **Numbers**: No quotes for integers
  - ✅ `nodes=4`
  - ✅ `ntasks=8`
  - ✅ `timeout=300`

- **Lists**: Use Python list syntax with brackets
  - ✅ `modules=["python/3.9", "cuda/11.0"]`
  - ❌ `modules="python/3.9, cuda/11.0"` (wrong - string instead of list)

- **Dictionaries/Objects**: Use Python dict syntax with braces
  - ✅ `environment_vars={"PATH": "/usr/bin", "HOME": "/home/user"}`
  - ❌ `environment_vars='{"PATH": "/usr/bin"}'` (wrong - string instead of dict)

- **Booleans**: Use Python boolean values
  - ✅ `summarize=True`
  - ✅ `summarize=False`
  - ❌ `summarize="true"` (wrong - string instead of boolean)

- **None/Null**: Use Python None (only when explicitly needed)
  - ✅ `user=None` (but better to omit optional parameters entirely)

### Special Formatting Rules:
- **Remove backticks** - Ignore any ` symbols from thinking
- **No cluster params** - Never add cluster_ip or cluster_port (these are auto-injected)
- **Optional parameters** - Omit parameters that aren't specified (don't pass None unless required)

## TOOL EXECUTION EXAMPLES:

**Example 1 - Simple submission:**
Thinking: Execute slurm_submit_job with script_path '/home/user/job.sh', partition 'gpu', nodes 2
Correct: slurm_submit_job(script_path="/home/user/job.sh", partition="gpu", nodes=2)

**Example 2 - With lists:**
Thinking: Execute slurm_create_script with modules ['python/3.9', 'cuda/11.0']
Correct: slurm_create_script(script_path="/path/to/script.sh", command="python train.py", modules=["python/3.9", "cuda/11.0"])

**Example 3 - With dictionary:**
Thinking: Execute slurm_create_script with environment_vars {"GPU_ID": "0", "BATCH_SIZE": "32"}
Correct: slurm_create_script(script_path="/path/to/script.sh", command="python train.py", environment_vars={"GPU_ID": "0", "BATCH_SIZE": "32"})

**Example 4 - From logs:**
Thinking: Execute slurm_cancel_job with job_id from step 2
Logs: {"step_2": {"job_id": "54321"}}
Correct: slurm_cancel_job(job_id="54321")

**Example 5 - Query with filters:**
Thinking: Execute slurm_query_queue with user 'john', state 'RUNNING'
Correct: slurm_query_queue(user="john", state="RUNNING")

## COMMON SYNTAX ERRORS TO AVOID:

❌ **Wrong**: `modules="python/3.9,cuda/11.0"` (string instead of list)
✅ **Right**: `modules=["python/3.9", "cuda/11.0"]`

❌ **Wrong**: `environment_vars='{"PATH": "/usr/bin"}'` (string instead of dict)
✅ **Right**: `environment_vars={"PATH": "/usr/bin"}`

❌ **Wrong**: `nodes="4"` (string instead of number)
✅ **Right**: `nodes=4`

❌ **Wrong**: `summarize="True"` (string instead of boolean)
✅ **Right**: `summarize=True`


## EXECUTION CHECKLIST:
Before executing, verify:
1. ✓ All string values have quotes: `"value"`
2. ✓ All numbers have NO quotes: `123`
3. ✓ All lists use brackets: `["item1", "item2"]`
4. ✓ All dicts use braces: `{"key": "value"}`
5. ✓ All booleans are `True` or `False` (not strings)
6. ✓ No cluster_ip or cluster_port parameters
7. ✓ All values copied exactly from logs/guidance

## YOUR RESPONSE:
Execute the tool call ONLY. No explanations, no extra text, just the function call with correct syntax.
FOLLOW THE <thinking> STRICTLY
---

Now read the sections below and execute:

<thinking>
<///thinking///>
</thinking>

<logs>
<///logs///>
</logs>